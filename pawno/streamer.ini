#define STREAMING_OBJS 3000
#define STREAM_RAD 150
forward Stream(playerid);

enum strdata
{
	Float:pos[6],
	what
}

new strbase[STREAMING_OBJS][strdata];
new strtimers[MAX_PLAYERS];
new added = -1;
new playerOIDss[MAX_PLAYERS][STREAMING_OBJS];
new objs[MAX_PLAYERS];

stock AddStreamingObject(model,Float:x,Float:y,Float:z,Float:rotx,Float:roty,Float:rotz)
{
	if(!(added < STREAMING_OBJS))
	{
		print("WARNING: Maximum streaming object limit kas been reached. No new objects will be streamed.");
		return -1;
	}

	added++;

	strbase[added][pos][0]=x;
	strbase[added][pos][1]=y;
	strbase[added][pos][2]=z;
	strbase[added][pos][3]=rotx;
	strbase[added][pos][4]=roty;
	strbase[added][pos][5]=rotz;
	strbase[added][what]=model;
	return added;
	
}

stock GetStreamingObjectPos(objectid,&Float:x,&Float:y,&Float:z)
{
	x = strbase[objectid][pos][0];
	y = strbase[objectid][pos][1];
	z = strbase[objectid][pos][2];
}

stock StartStreamingForPlayer(playerid,interval)
{
	for(new o=0; o<added+1; o++)
	{
		playerOIDss[playerid][o]=-1;
	}
	

	objs[playerid]=0;
	strtimers[playerid] = SetTimerEx("Stream",interval,true,"i",playerid);
}

stock StopPlayerStreaming(playerid)
{
	KillTimer(strtimers[playerid]);
}

stock MoveStreamingObject(objectid,Float:x,Float:y,Float:z,Float:speed)
{
	strbase[objectid][pos][0]=x;
	strbase[objectid][pos][1]=y;
	strbase[objectid][pos][2]=z;


	for(new playerid=0; playerid<MAX_PLAYERS; playerid++)
	{
		if(IsPlayerConnected(playerid))
		{
			if(playerOIDss[playerid][objectid]!=-1)
			{
				MovePlayerObject(playerid,playerOIDss[playerid][objectid],x,y,z,speed);
			}
		}
	}

}

public Stream(playerid)
{
	new Float:coo[3];
	GetPlayerPos(playerid,coo[0],coo[1],coo[2]);

	//loop for objects
	for(new object=0; object<added+1; object++)
	{
		if(playerOIDss[playerid][object]>-1)
		{
			if(!(floatabs(coo[0]-strbase[object][pos][0]) <= STREAM_RAD) ||
		   	!(floatabs(coo[1]-strbase[object][pos][1]) <= STREAM_RAD) ||
		   	!(floatabs(coo[2]-strbase[object][pos][2]) <= STREAM_RAD))
			{
				DestroyPlayerObject(playerid,playerOIDss[playerid][object]);
				playerOIDss[playerid][object]=-1;
				objs[playerid]--;
			}
		}else{
			
			if(floatabs(coo[0]-strbase[object][pos][0]) <= STREAM_RAD &&
		   	floatabs(coo[1]-strbase[object][pos][1]) <= STREAM_RAD &&
		   	floatabs(coo[2]-strbase[object][pos][2]) <= STREAM_RAD)
			{	
				if(objs[playerid]<101)
				{
					playerOIDss[playerid][object]=CreatePlayerObject(playerid,strbase[object][what],strbase[object][pos][0],strbase[object][pos][1],strbase[object][pos][2],strbase[object][pos][3],strbase[object][pos][4],strbase[object][pos][5]);
					objs[playerid]++;
				}
			}
		}
	}
}


				
	


	